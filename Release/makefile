################################################################################
# cunningly generated by hand
################################################################################

BUILD_DIR := $(abspath $(dir $(abspath $(lastword $(MAKEFILE_LIST)))))
PROJECT_DIR := $(abspath $(BUILD_DIR)/..)
PROJECT := $(notdir $(PROJECT_DIR))
#ARM_TOOLS := $(ARDUINO_ROOT)/hardware/tools/gcc-arm-none-eabi-4.8.3-2014q1/bin
ARM_TOOLS := /usr/bin
-include ../makefile.init


RM := rm -rf
GCPP := $(ARM_TOOLS)/arm-none-eabi-g++
GCC := $(ARM_TOOLS)/arm-none-eabi-gcc

CPP_FLAGS := -c -g -Os -ffunction-sections -fdata-sections -nostdlib -fno-threadsafe-statics --param max-inline-insns-single=500 -fno-rtti -fno-exceptions -Dprintf=iprintf -mcpu=cortex-m3 -DF_CPU=84000000L -DARDUINO=158 -DARDUINO_SAM_DUE -DARDUINO_ARCH_SAM  -D__SAM3X8E__ -mthumb -DUSB_VID=0x2341 -DUSB_PID=0x003e -DUSBCON '-DUSB_MANUFACTURER="Unknown"' '-DUSB_PRODUCT="Arduino Due"'
CC_FLAGS := -c -g -Os -ffunction-sections -fdata-sections -nostdlib --param max-inline-insns-single=500 -Dprintf=iprintf -mcpu=cortex-m3 -DF_CPU=84000000L -DARDUINO=158 -DARDUINO_SAM_DUE -DARDUINO_ARCH_SAM  -D__SAM3X8E__ -mthumb -DUSB_VID=0x2341 -DUSB_PID=0x003e -DUSBCON '-DUSB_MANUFACTURER="Unknown"' '-DUSB_PRODUCT="Arduino Due"' 

INCLUDES := \
	-I"$(ARDUINO_ROOT)/variants/arduino_due_x" \
	-I"$(ARDUINO_ROOT)/system/libsam" \
	-I"$(ARDUINO_ROOT)/system/CMSIS/CMSIS/Include/" \
	-I"$(ARDUINO_ROOT)/system/CMSIS/Device/ATMEL/" \
	-I"$(ARDUINO_ROOT)/cores/arduino" \
	-I"$(PROJECT_DIR)/lib/DueTimer" \
	-I"$(PROJECT_DIR)/lib/Kangaroo" \
	-I"$(PROJECT_DIR)/lib/SPI" \
	-I"$(PROJECT_DIR)/lib/MultiSerial" \
	-I"$(PROJECT_DIR)/lib/JsonStream" \
	-I"$(PROJECT_DIR)/lib/NMEA" \
	-I"$(PROJECT_DIR)/lib/PString" \
	-I"$(PROJECT_DIR)/lib/AverageList" \
	-I"$(PROJECT_DIR)/lib/PID_v1" \
	-I"$(PROJECT_DIR)/lib/SevSeg" \
	-I"$(PROJECT_DIR)/lib/QueueList" \
	-I"$(PROJECT_DIR)/lib/DueFlashStorage" \
	-I"$(PROJECT_DIR)/functions" \
	-I"$(PROJECT_DIR)/model" \
	-I"$(PROJECT_DIR)"


# All of the sources participating in the build are defined here
-include sources.mk

PROJ_CPP_DEPS = $(addprefix $(BUILD_DIR)/,$(CPP_SRCS:=.d))
PROJ_LINK_OBJ = $(addprefix $(BUILD_DIR)/,$(CPP_SRCS:=.o))
PROJ_XML_SRCS = $(addprefix $(PROJECT_DIR)/,$(XML_SRCS:xml=cpp)) $(addprefix $(PROJECT_DIR)/,$(XML_SRCS:xml=h)) 
PROJ_CPP_DEPS += $(addprefix $(BUILD_DIR)/,$(XML_SRCS:xml=cpp.d))
PROJ_LINK_OBJ += $(addprefix $(BUILD_DIR)/,$(XML_SRCS:xml=cpp.o))

ARDUINO_CPP_DEPS += $(subst $(ARDUINO_ROOT),$(BUILD_DIR),$(ARDUINO_CPP_SRCS:=.d))
ARDUINO_CPP_LINK_OBJ += $(subst $(ARDUINO_ROOT),$(BUILD_DIR),$(ARDUINO_CPP_SRCS:=.o))
ARDUINO_C_LINK_OBJ += $(subst $(ARDUINO_ROOT),$(BUILD_DIR),$(ARDUINO_C_SRCS:=.o))

AR_OBJ += $(subst $(ARDUINO_ROOT),$(BUILD_DIR),$(ARDUINO_CPP_SRCS:=.o))

$(PROJ_XML_SRCS): $(PROJECT_DIR)/model/nmea_c.xsl $(PROJECT_DIR)/model/nmea_h.xsl $(PROJECT_DIR)/model/nmea_model.xml
	mkdir -p $(@D)
	@echo 'Building xml file: $(@) from $(subst $(BUILD_DIR),$(PROJECT_DIR),$(patsubst %.cpp,%,$@))'
	xsltproc $(PROJECT_DIR)/model/nmea_c.xsl $(PROJECT_DIR)/model/nmea_model.xml > $(PROJECT_DIR)/model/nmea_model.cpp
	xsltproc $(PROJECT_DIR)/model/nmea_h.xsl $(PROJECT_DIR)/model/nmea_model.xml > $(PROJECT_DIR)/model/nmea_model.h

$(PROJ_LINK_OBJ): $(addprefix $(PROJECT_DIR)/, $(CPP_SRCS)) $(PROJ_XML_SRCS)
	mkdir -p $(@D)
	@echo 'Building project file: $(@) $(subst $(BUILD_DIR),$(PROJECT_DIR),$(patsubst %.o,%,$@))'
	@echo 'Starting link'
	$(GCPP) $(CPP_FLAGS) $(INCLUDES) -MMD -MP -MF"$(@:%.o=%.d)" -MT"$(@:%.o=%.d)" -x c++ $(subst $(BUILD_DIR),$(PROJECT_DIR),$(patsubst %.o,%,$@)) -o  $@ -Wall
	@echo 'Finished building: $@'
	@echo ' '

$(ARDUINO_CPP_LINK_OBJ): $(ARDUINO_CPP_SRCS)
	mkdir -p $(@D)
	@echo 'Building arduino file: $(@F)'
	@echo 'Starting C++ compile'
	$(GCPP) $(CPP_FLAGS) $(INCLUDES) -MMD -MP -MF"$(@:%.o=%.d)" -MT"$(@:%.o=%.d)" -x c++ $(subst $(BUILD_DIR),$(ARDUINO_ROOT),$(patsubst %.o,%,$@)) -o  $@   -Wall
	@echo 'Finished building: $@'
	@echo ' '

$(ARDUINO_C_LINK_OBJ): $(ARDUINO_C_SRCS)
	mkdir -p $(@D)
	@echo 'Building file: $<'
	@echo 'Starting C compile'
	$(GCC) $(CC_FLAGS) $(INCLUDES) -MMD -MP -MF"$(@:%.o=%.d)" -MT"$(@:%.o=%.d)" $(subst $(BUILD_DIR),$(ARDUINO_ROOT),$(patsubst %.o,%,$@)) -o  $@   -Wall
	@echo 'Finished building: $<'
	@echo ' '


ifneq ($(MAKECMDGOALS),clean)
ifneq ($(strip $(C++_DEPS)),)
-include $(C++_DEPS)
endif
ifneq ($(strip $(ASM_DEPS)),)
-include $(ASM_DEPS)
endif
ifneq ($(strip $(C_DEPS)),)
-include $(C_DEPS)
endif
ifneq ($(strip $(CC_DEPS)),)
-include $(CC_DEPS)
endif
ifneq ($(strip $(CPP_DEPS)),)
-include $(CPP_DEPS)
endif
ifneq ($(strip $(CXX_DEPS)),)
-include $(CXX_DEPS)
endif
ifneq ($(strip $(C_UPPER_DEPS)),)
-include $(C_UPPER_DEPS)
endif
ifneq ($(strip $(S_UPPER_DEPS)),)
-include $(S_UPPER_DEPS)
endif
endif

-include ../makefile.defs

# Add inputs and outputs from these tool invocations to the build variables 
AR = arduino.ar

ELF = freeboardDue.elf

EEP = freeboardDue.eep

FLASH_IMAGE = freeboardDue.bin


# All Target
all: freeboardDue

debug: 
	@echo { $(ARDUINO_ROOT) } { $(XML_SRCS) } { $(PROJ_XML_SRCS) }

# Tool invocations
freeboardDue: $(FLASH_IMAGE)
	@echo 'Building target: $@'
	@echo 'Printing size:'
	"$(ARM_TOOLS)/arm-none-eabi-size" -A "$(PROJECT_DIR)/Release/freeboardDue.elf"
	@echo 'Finished building target: $@'
	@echo ' '

$(AR): $(AR_OBJ)
	@echo 'Starting archiver'
	"$(ARM_TOOLS)/arm-none-eabi-ar" rcs  "$(PROJECT_DIR)/Release/arduino.ar"   $(AR_OBJ)
	@echo 'Finished building: $@'
	@echo ' '

freeboardDue.elf: $(PROJ_LINK_OBJ) $(ARDUINO_CPP_LINK_OBJ) $(ARDUINO_C_LINK_OBJ) $(AR)
	@echo 'Starting combiner'
	$(GCC) -Os -Wl,--gc-sections -mcpu=cortex-m3 \
	-T$(ARDUINO_ROOT)/variants/arduino_due_x/linker_scripts/gcc/flash.ld \
	-Wl,-Map,$(PROJECT_DIR)/Release/freeboardDue.map  -o $(PROJECT_DIR)/Release/freeboardDue.elf \
	-L$(PROJECT_DIR)/Release -mthumb -Wl,--cref -Wl,--check-sections \
	-Wl,--gc-sections -Wl,--entry=Reset_Handler -Wl,--unresolved-symbols=report-all \
	-Wl,--warn-common -Wl,--warn-section-align -Wl,--warn-unresolved-symbols -Wl,--start-group \
	$(PROJ_LINK_OBJ) $(ARDUINO_CPP_LINK_OBJ) $(ARDUINO_C_LINK_OBJ) $(AR)  \
	$(ARDUINO_ROOT)/variants/arduino_due_x/libsam_sam3x8e_gcc_rel.a $(AR) -Wl,--end-group -lm -gcc
	@echo 'Finished building: $@'
	@echo ' '

freeboardDue.eep: $(ELF)
	@echo 'Create eeprom image'
	${A.RECIPE.OBJCOPY.EEP.PATTERN}
	@echo 'Finished building: $@'
	@echo ' '

freeboardDue.bin: $(EEP)
	@echo 'Create Flash image (ihex format)'
	"$(ARM_TOOLS)/arm-none-eabi-objcopy" -O binary  \
	"$(PROJECT_DIR)/Release/freeboardDue.elf" "$(PROJECT_DIR)/Release/freeboardDue.bin"
	@echo 'Finished building: $@'
	@echo ' '

upload : all
	stty -F /dev/$(PORT) 1200
	bossac -p $(PORT) -e -w -v --boot=1 $(BUILD_DIR)/freeboardDue.bin -R

monitor :
	$(MON_CMD) $(PORT) $(MON_SPEED)

# Other Targets
clean:
	-$(RM) $(C_DEPS) $(AR) $(FLASH_IMAGE) $(EEP) $(CXX_DEPS) $(S_UPPER_DEPS) $(C++_DEPS) $(ELF) \
	$(ASM_DEPS) $(CC_DEPS) $(AR_OBJ) $(PROJ_CPP_DEPS) $(ARDUINO_LINK_DEPS) $(PROJ_XML_SRCS) \
	$(PROJ_LINK_OBJ) $(ARDUINO_CPP_LINK_OBJ) $(ARDUINO_C_LINK_OBJ) $(C_UPPER_DEPS) $(SIZEDUMMY) freeboardDue \
	hardware lib $(PROJECT).map
	-@echo ' '

.PHONY: all clean dependents debug upload
.SECONDARY:

-include ../makefile.targets
